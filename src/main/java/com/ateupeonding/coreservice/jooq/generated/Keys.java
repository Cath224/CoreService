/*
 * This file is generated by jOOQ.
 */
package com.ateupeonding.coreservice.jooq.generated;


import com.ateupeonding.coreservice.jooq.generated.tables.Account;
import com.ateupeonding.coreservice.jooq.generated.tables.Goal;
import com.ateupeonding.coreservice.jooq.generated.tables.Notification;
import com.ateupeonding.coreservice.jooq.generated.tables.Project;
import com.ateupeonding.coreservice.jooq.generated.tables.Tier;
import com.ateupeonding.coreservice.jooq.generated.tables.UserGoal;
import com.ateupeonding.coreservice.jooq.generated.tables.UserTier;
import com.ateupeonding.coreservice.jooq.generated.tables.records.AccountRecord;
import com.ateupeonding.coreservice.jooq.generated.tables.records.GoalRecord;
import com.ateupeonding.coreservice.jooq.generated.tables.records.NotificationRecord;
import com.ateupeonding.coreservice.jooq.generated.tables.records.ProjectRecord;
import com.ateupeonding.coreservice.jooq.generated.tables.records.TierRecord;
import com.ateupeonding.coreservice.jooq.generated.tables.records.UserGoalRecord;
import com.ateupeonding.coreservice.jooq.generated.tables.records.UserTierRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in 
 * ateupeonding_core.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AccountRecord> ACCOUNT_PKEY = Internal.createUniqueKey(Account.ACCOUNT, DSL.name("account_pkey"), new TableField[] { Account.ACCOUNT.ID }, true);
    public static final UniqueKey<AccountRecord> ACCOUNT_USER_ID_KEY = Internal.createUniqueKey(Account.ACCOUNT, DSL.name("account_user_id_key"), new TableField[] { Account.ACCOUNT.USER_ID }, true);
    public static final UniqueKey<GoalRecord> GOAL_PKEY = Internal.createUniqueKey(Goal.GOAL, DSL.name("goal_pkey"), new TableField[] { Goal.GOAL.ID }, true);
    public static final UniqueKey<NotificationRecord> NOTIFICATION_PKEY = Internal.createUniqueKey(Notification.NOTIFICATION, DSL.name("notification_pkey"), new TableField[] { Notification.NOTIFICATION.ID }, true);
    public static final UniqueKey<ProjectRecord> PROJECT_PKEY = Internal.createUniqueKey(Project.PROJECT, DSL.name("project_pkey"), new TableField[] { Project.PROJECT.ID }, true);
    public static final UniqueKey<TierRecord> TIER_PKEY = Internal.createUniqueKey(Tier.TIER, DSL.name("tier_pkey"), new TableField[] { Tier.TIER.ID }, true);
    public static final UniqueKey<UserGoalRecord> USER_GOAL_PKEY = Internal.createUniqueKey(UserGoal.USER_GOAL, DSL.name("user_goal_pkey"), new TableField[] { UserGoal.USER_GOAL.ID }, true);
    public static final UniqueKey<UserTierRecord> USER_TIER_PKEY = Internal.createUniqueKey(UserTier.USER_TIER, DSL.name("user_tier_pkey"), new TableField[] { UserTier.USER_TIER.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<GoalRecord, ProjectRecord> GOAL__GOAL_PROJECT_ID_FKEY = Internal.createForeignKey(Goal.GOAL, DSL.name("goal_project_id_fkey"), new TableField[] { Goal.GOAL.PROJECT_ID }, Keys.PROJECT_PKEY, new TableField[] { Project.PROJECT.ID }, true);
    public static final ForeignKey<NotificationRecord, AccountRecord> NOTIFICATION__NOTIFICATION_ACCOUNT_ID_FKEY = Internal.createForeignKey(Notification.NOTIFICATION, DSL.name("notification_account_id_fkey"), new TableField[] { Notification.NOTIFICATION.ACCOUNT_ID }, Keys.ACCOUNT_PKEY, new TableField[] { Account.ACCOUNT.ID }, true);
    public static final ForeignKey<ProjectRecord, AccountRecord> PROJECT__PROJECT_ACCOUNT_ID_FKEY = Internal.createForeignKey(Project.PROJECT, DSL.name("project_account_id_fkey"), new TableField[] { Project.PROJECT.ACCOUNT_ID }, Keys.ACCOUNT_PKEY, new TableField[] { Account.ACCOUNT.ID }, true);
    public static final ForeignKey<TierRecord, ProjectRecord> TIER__TIER_PROJECT_ID_FKEY = Internal.createForeignKey(Tier.TIER, DSL.name("tier_project_id_fkey"), new TableField[] { Tier.TIER.PROJECT_ID }, Keys.PROJECT_PKEY, new TableField[] { Project.PROJECT.ID }, true);
    public static final ForeignKey<UserGoalRecord, AccountRecord> USER_GOAL__USER_GOAL_ACCOUNT_ID_FKEY = Internal.createForeignKey(UserGoal.USER_GOAL, DSL.name("user_goal_account_id_fkey"), new TableField[] { UserGoal.USER_GOAL.ACCOUNT_ID }, Keys.ACCOUNT_PKEY, new TableField[] { Account.ACCOUNT.ID }, true);
    public static final ForeignKey<UserGoalRecord, GoalRecord> USER_GOAL__USER_GOAL_GOAL_ID_FKEY = Internal.createForeignKey(UserGoal.USER_GOAL, DSL.name("user_goal_goal_id_fkey"), new TableField[] { UserGoal.USER_GOAL.GOAL_ID }, Keys.GOAL_PKEY, new TableField[] { Goal.GOAL.ID }, true);
    public static final ForeignKey<UserTierRecord, AccountRecord> USER_TIER__USER_TIER_ACCOUNT_ID_FKEY = Internal.createForeignKey(UserTier.USER_TIER, DSL.name("user_tier_account_id_fkey"), new TableField[] { UserTier.USER_TIER.ACCOUNT_ID }, Keys.ACCOUNT_PKEY, new TableField[] { Account.ACCOUNT.ID }, true);
    public static final ForeignKey<UserTierRecord, TierRecord> USER_TIER__USER_TIER_TIER_ID_FKEY = Internal.createForeignKey(UserTier.USER_TIER, DSL.name("user_tier_tier_id_fkey"), new TableField[] { UserTier.USER_TIER.TIER_ID }, Keys.TIER_PKEY, new TableField[] { Tier.TIER.ID }, true);
}
